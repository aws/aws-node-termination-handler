# Test values for aws-node-termination-handler.
# This is a YAML-formatted file.
# Declare variables to test template rendering functionality.

image:
    repository: amazon/aws-node-termination-handler
    tag: v1.6.1
    pullPolicy: IfNotPresent
    pullSecrets: ["test"]
  
securityContext:
    runAsUserID: 1000
    runAsGroupID: 1000

nameOverride: "test-nth"
fullnameOverride: "test-aws-node-termination-handler"

priorityClassName: system-node-critical

podAnnotations: {
    test: test
}
linuxPodAnnotations: {
    test: test
}
windowsPodAnnotations: {
    test: test
}

podLabels: {
    test: test
}
linuxPodLabels: {
    test: test
}
windowsPodLabels: {
    test: test
}

resources:
    requests:
        memory: "64Mi"
        cpu: "50m"
    limits:
        memory: "128Mi"
        cpu: "100m"

## enableSpotInterruptionDraining If false, do not drain nodes when the spot interruption termination notice is received
enableSpotInterruptionDraining: true

## enableScheduledEventDraining [EXPERIMENTAL] If true, drain nodes before the maintenance window starts for an EC2 instance scheduled event
enableScheduledEventDraining: true

# Total number of times to try making the metadata request before failing.
metadataTries: 3

# Cordon but do not drain nodes upon spot interruption termination notice.
cordonOnly: false

# Taint node upon spot interruption termination notice.
taintNode: false

# Log messages in JSON format.
jsonLogging: false

## dryRun tells node-termination-handler to only log calls to kubernetes control plane
dryRun: false

# deleteLocalData tells kubectl to continue even if there are pods using
# emptyDir (local data that will be deleted when the node is drained).
deleteLocalData: true

# ignoreDaemonSets causes kubectl to skip Daemon Set managed pods.
ignoreDaemonSets: true

# gracePeriod (DEPRECATED - use podTerminationGracePeriod instead) is time in seconds given to each pod to terminate gracefully.
# If negative, the default value specified in the pod will be used.
gracePeriod: 1
podTerminationGracePeriod: 1

# nodeTerminationGracePeriod specifies the period of time in seconds given to each NODE to terminate gracefully. Node draining will be scheduled based on this value to optimize the amount of compute time, but still safely drain the node before an event.
nodeTerminationGracePeriod: 1

# webhookURL if specified, posts event data to URL upon instance interruption action.
webhookURL: https://localhost:1338

# Webhook URL will be fetched from the secret store using the given name.
webhookURLSecretName: test

# webhookProxy if specified, uses this HTTP(S) proxy configuration.
webhookProxy: tcp://localhost:1338

# webhookHeaders if specified, replaces the default webhook headers.
webhookHeaders: "Content-Type: json"

# webhookTemplate if specified, replaces the default webhook message template.
webhookTemplate: "{\"Content\":\"[NTH][Instance Interruption] InstanceId\"}"

# instanceMetadataURL is used to override the default metadata URL (default: http://169.254.169.254:80)
instanceMetadataURL: "https://localhost:1338"

# (TESTING USE): Mount path for uptime file
procUptimeFile: "/proc/uptime"

# Create node OS specific daemonset(s). (e.g. "linux", "windows", "linux windows")
targetNodeOs: "linux"

# nodeSelector tells both linux and windows daemonsets where to place the node-termination-handler
# pods. By default, this value is empty and every node will receive a pod.
nodeSelector: {
    test: test
}
# linuxNodeSelector tells the linux daemonset where to place the node-termination-handler
# pods. By default, this value is empty and every linux node will receive a pod.
linuxNodeSelector: {
    test: test
}
# windowsNodeSelector tells the windows daemonset where to place the node-termination-handler
# pods. By default, this value is empty and every windows node will receive a pod.
windowsNodeSelector: {
    test: test
}

enablePrometheusServer: true
prometheusServerPort: "9092"

tolerations:
- operator: "Exists"

affinity: {
    test: test
}
linuxAffinity: {
    test: test
}
windowsAffinity: {
    test: test
}

serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use. If name is not set and create is true,
    # a name is generated using fullname template
    name: test
    annotations: {
        test: test
    }
    # eks.amazonaws.com/role-arn: arn:aws:iam::AWS_ACCOUNT_ID:role/IAM_ROLE_NAME

rbac:
    # rbac.pspEnabled: `true` if PodSecurityPolicy resources should be created
    pspEnabled: true

dnsPolicy: "ClusterFirstWithHostNet"

podMonitor:
    # Specifies whether PodMonitor should be created
    create: true
    # The Prometheus scrape interval
    interval: 30s
    # The number of scraped samples that will be accepted
    sampleLimit: 5000
    # Additional labels to add to the metadata
    labels: {
        test: test
    }

# K8s DaemonSet update strategy.
updateStrategy:
    type: RollingUpdate
    rollingUpdate:
        maxUnavailable: 1
    linuxUpdateStrategy: "RollingUpdate"
    windowsUpdateStrategy: "RollingUpdate"